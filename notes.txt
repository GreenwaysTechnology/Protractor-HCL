Node.js
-------
-->It is javascript runtime, used to run java script applications outside web browser
->it is written on google v8, which is called javascript runtime.

what is objective of node.js?

1.To network nonblocking and async  web applications.
    ->To scale hori - min resources, high performance.

Node use cases:

1. Build javascript applications for web,network based application.
2. Used to run as a platform for building other application- UI,Mobile Applications...
3. Used as Testing engine - /Testing platform - How to test javascript javascript application.

Javascript Application:

js was created for manipulating web pages  - :  DOM programming.

After node:

javascript has been used to build

1.server side applications : restfull webservices,dynamic content generation application
2.User interface applications-SPA - back bone,Angular js(1),Angular-2,4,5,6,7,8,9(Typescript)
                                    React.js, Vue.js......
3.Mobile Apps - Angular -ionic,React Native......
4.Device apps -
5.Machine learning,AI

What ever type of app, we need to test. in order test applications we need testing frameworks

Software env:

1.dev
2.testing
3.Prod

in order to set any env, we need platform - Node.js

Node and testing env:
....................


                            Testing Apps
                                |	

	Mocha,jasmine      --------Testing Engine-Javascript program-Frameworks
				 |
			       Node.js - platform
				 |
				 OS
********************************************************************************************

basic knowledge on javascript.
node  applications -  node modules
javascript package manager - npm.

functions- args,parameters,return values
async programming - callbacks,promise,async,await

*******************************************************************************************
How enter prise javascript application ; modualrity.

 breaking application into smaller and smaller , how to combine and them run them.

js has no any modular patterns.

js community brought modular design patterns.

1.namespace -old
2.amd-
3.cjs - which is used in node applications even today
4.e6 modules- ecma pattern
5.system
6.umd

cjs:
 - how to write code and how link code and how distribute them.

Linking
 cjs provides simple function  name called "require"

sharing
 exports : packs any code inside an object and that object will be returned.

 module.exports :
  it does not add code inside object , rather it returns as it is-  
  lets say if you return function, it returns function.


Types of modules:

1.custom modules : you have created.
2.node in built modules : provided by node, for building network , io applications.
3.third party modules ; provided by community.
    eg : jasmin,protractor,chai,should,blanket..........angular,react,vue,express....
-->npm


Third party modules:

 The module is built and distributed by person/company/community to others.

you need a centeralized location  , repository server - https://www.npmjs.com/

npmjs.com is one the biggest software repository ever.

if you want to use any third party module, you need to download loacally from this repository.
if you want to publish modules.


in order to deal with third party modules, you need tool called "npm / npmx".

npm tool is distributed along with node distribution.

 ->npm --version

npm -node package manager 
 tool.

where we can download node-moudles from npmjs.com?

->node_modules
    -it is folder where all third party javascript files- libs,frameworks.

where you can find out this folder?

 -> inside project
 -> inside c/ drive - gobal modlues

how to create this folder?

 folder is first created when you download any modules.


project meta file: package.json
   configuration file.

This is file , for keeping javascript apps(any type)

Every node project must have package.json file.

how to create it?
  npm command

npm init

{
  "name": "mynode-apps",
  "version": "1.0.0",
  "description": "This is pre learning for Protractor",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Subramanian Murugan",
  "license": "ISC"
}
*******************************************************************************************

Node Modules category:

->For development and Production 
->For development only - testing dependencies.
->For development/Testing/Production tooling - tools for automation, testing.....

if any category, you can download and install.

  npm install modulename --category(options)
  npm install modulename  
 options
   --save  :  dev+production
   --save-dev :  only for dev/test/tool
   --global /g  :  only for tooling

->For development and Production:
 npm install modulename  --save
 
package.json
"dependencies": {
    "lodash": "^4.17.19"
  }

//use third party dependencies

var _ =require('lodash');

var users = [
    { 'user': 'barney', 'age': 36, 'active': false },
    { 'user': 'fred',   'age': 40, 'active': true }
  ];

var result =_.filter(users, function(o) { return !o.active; });

console.log(result);

how to unistall modules:
.........................
>npm uninstall jquery --save
********************************************************************************************

dev depedencies:

 npm install modulename --save-dev

eg:
 Unit testing assertion lib.

chai
npm install chai --save-dev

 "devDependencies": {
    "chai": "^4.2.0"
  }
********************************************************************************************
 require('module') vs require('./module')

 if require('module') , node internally uses a search algorthim, which searches node modules
 
  --->project node_modules
		  |
                 if found , it will load from there
                   |
                    if not found
			 |
			c/users/.../node_modules folder
				
                            |
			 if found, load from here
			    |
                            if not ,it will throw error-module not found 




require('./module')
         it searches the current project folder


**********************************************************************************************

Global modules :  used for tool purpose.

 - build tools
 - compilers
 - Testing runtimes- Mocha,Jasmine,Protractor
 - Servers - ready made webservers,testing servers,automation servers
.....

 npm install module -g

Eg:

 mocha -

npm install mocha -g

C:\Users\sasub\AppData\Roaming\npm

mocha --version
8.0.1
*********************************************************************************************
automation: running scripts , which executes some tasks
.............................................................................................

in node applications, automation is taken care by npm tool.

how to start automation?
 -package.json , there is an entry 

  "scripts"

 key: value

 key : command name
 value : task to be executed

 eg : if i want to application, through automation.

note: 
 command name is provided by npm itself : built in commands
  eg: start,test,......
 command also be user defined.
  xxx,

 "scripts": {
    "start" : "node src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }

how to run?

 npm start ---npm commandName

 npm run commandName - for user defined

 "scripts": {
    "start" : "node src/index.js",
    "build": "node src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }

Global Modules and problems;
...........................

1.version mismatch for across many projects

install all the tools as "dev-dependencies' inside project


--
npm install mocha --save-dev

configure this inside scripts section: testing automation.
*********************************************************************************************
Async programming and its implementation:

 -callbacks
 -promises
 -async .. await keywords

What is async programming?


conncurrency:

Most of the programming languages - jvm is multi threaded
javascript is not multithread - single thread.

How to write async programming?

Rules:

1.async apis should be provided by node/js.
 -eg:
   timers - settimeout,setinterval
   file system - to read and write files
   networking apis-  tcp/ip , http
  etc.....

2.Handlers - functions , to handle/read async operation results -  callbacks
  callbacks are just function which are passed as parameter to async api.



//async programming.

//using timer

function  delay(callback){
  setTimeout(callback,1000);
}
console.log('start')
delay(function handler(){
    console.log('Delay');
});
console.log('end');

//
function handle(handler){
    setTimeout(handler,2000,"Welcome to Non blocking World!!!")
}

handle(function handler(data){
    console.log(data);
});
*****************************************************************************************

Problems with callback : CallbackHell

//callback nesting
//the output of one callback, will be input to another callback.
///any code will have two things : 1. success(resolve), 2.failure(rejections)
//getuser---success---login(user,success,failure)---|
//getUser---failure --error---Stop


function getUser(resolve,reject){
 //mock data
  var user = 'admin';
  var errorMessage = 'User Not Found!';
  if(user){
        setTimeout(resolve,1000,user);
  }else{
       setTimeout(reject,1000,errorMessage)
  }

}
function login(user,resolve,reject){
    var errorMessage = 'Login failed';
    var successMessage ='Login success';
    if(user === 'admin'){
          setTimeout(resolve,1000,successMessage);
    }else{
         setTimeout(reject,1000,errorMessage)
    }
   
}

//caller
getUser(function(user){
    console.log('User api is called')
    //callback nesting
     login(user,function(success){
       console.log(success)        
     },function(failure){
        console.log(failure);
     });
} , function(err){
   console.log(err);
})

if you look at the above code ask your self

1.code is readable?
2.code is maintainable
3.code is scalable
 
No :  this is called as "callback hell"

how to fix callback hell, how to write good code?
->Ans : Promise

What is promise?

 Promise is design pattern , introduced to avoid callback hell. 

Since it is design pattern, we need implementation.

many vendors started writing promises

1.jquery
2.many vendors

3.In 2012 , js community who added promises in language itself as 
Object.

 Promise Object
..................

Promise object can be created in two ways

1.Factory api
   
2.using Constructors 

Note : By default Promise is async, which internally implments timer with 0 ms.


methods :
 1.resolve
 2.reject
 3.then
 4.catch
 5.finally
 etc...
//Promise
/**
 * 1.create Promise object using factory apis
 * 
 */

 //callback success only
//  function getData(callback){
//    setTimeout(callback,0,"some data");
//  }
//  getData(function(data){
//      console.log(data)
//  })

//Promise success only
function getData(){
    return Promise.resolve('Some data');
}
console.log('start')
getData().then(function(res){
    console.log(res);
});
console.log('end');

//error only
function getError(){
    return Promise.reject('Some error');
}
getError().catch(function(res){
    console.log(res);
});

//how to return success/failure

function getUser(){
    //mock data
     var user = 'admin';
     var errorMessage = 'User Not Found!';
     if(user){
          return Promise.resolve(user)
     }
     return Promise.reject(errorMessage)   
   
}

function login(user){
    var errorMessage = 'Login failed';
    var successMessage ='Login success';
    if(user === 'admin'){
        return Promise.resolve(successMessage)
    }
    return Promise.reject(errorMessage)      
}
getUser()
  .then(function(res){
      console.log('user api is called!!!');
      return login(res)
  })
  .then(function(res){
      console.log(res)
  })
  .catch(function(res){
    console.log(res);
 })
 .finally(function(){
     console.log('finally')
 });
//////////////////////////////////////////////////////////////////////////////////
//Promise constructors : to convert exsiting callback apis to promise powered.

function getCustomer(){
    //mock data
     var user = 'customer';
     var errorMessage = 'Customer Not Found!';
     return new Promise(function(resolve,reject){
        if(user){
            setTimeout(resolve,2000,user);
        }else{
            setTimeout(reject,2000,errorMessage)
        }
     });
   
}
getCustomer().then(function(res){
    console.log(res);
}).catch(function(res){
    console.log(res);
 })
 .finally(function(){
     console.log('customer finally')
 });


Promise hell:
 if we consumes promises, we need to process with multi then and catch.

async await: 
 it is abstraction for handling promises 
 

//async..await
/**
 * async is keyword used infront of function : async function
 * async function by default may return Promise.resolve
 */
async function getDefaultData(){
    return 'Hello'; //Promise.resolve('Hello');
}
getDefaultData().then(function(res){
    console.log(res);
})
// async function getError(){
//     return Promise.reject('something went wrong');
// }
// getError().catch(function(err){
//     console.log(err);
// })
///////////////////////////////////////////////////////////////////////////////////
//callee

function  getUser(){
      //mock data
      var user = 'admin';
      var errorMessage = 'User Not Found!';
      if(user){
           return Promise.resolve(user)
      }
      return Promise.reject(errorMessage)  
}
function login(user){
    var errorMessage = 'Login failed';
    var successMessage ='Login success';
    if(user === 'admin'){
        return Promise.resolve(successMessage)
    }
    return Promise.reject(errorMessage)      
}
//caller 
async function process(){
    // getUser().then(function(res){
    //     console.log(res)
    // }).catch(function(err){
    //     console.log(err);
    // })

 try{
    var user = await getUser();
    //call login method
    var status = await login(user);
    console.log(status)
 }
 catch(err){
     console.log(err)
 }
 finally{
     console.log('finally')
 }

}
process();

********************************************************************************************
Typescript:
...........

What is typescript?

 Typescript scales javascript.
 scales -Expanding the features of javascript.

javascript and entrise computing:

1.js is type less /dynamic typed language.
2.js is not object oriented , object  base.


How to make object oriented javascript?


---In 2012 , javascript team : ECMA Committte provided a spce
 -ES 6 Spec - new version of javascript.

es6 features
1.class
2.arrow functions
3.Promise
4.async and await keywords
......

2012 - ms started a project on es 6 + typing + extra features = typescript.

Typescript is super set of javascript.

Typescript:

1.it is language, cant be exectued on browser/node directly
  we need to compile into javascript.

hello.ts ---compile----hello.js---execute.

********************************************************************************************

Typescript project:

1.compiler - is npm dependency

src/ source code - filename.ts

build / compiled code - filename.js

if you want to change compiler setting , compiler offers lot configuration ; compiler configuration.

tsc --options
******************************************************************************************


Type standards:

 type script has been written on ES 6 ,Which is modern java script standard.

Variable declaration;

var  - ES 5

let,const  - ES 6 - Recommended keywords

var vs let/const.

es 6----compiler(transpilers)--->ES 5
        babel

typescript -tsc------|by default converts -ES 5 Standard


//let keyword

let firstName="Subramanian";
let lastName="Murugan";
//strings : "" , '' , ``(backtick)

//backtick : multi line, string concatnation
console.log(" Name " + firstName + lastName)
console.log(`Name ${firstName} ${lastName}`)
//multiline
let html="<html>"+
         "</html>"
let title = "Protractor App";
let htmlDoc =`
       <html>
          <title>${title}</title>
          <body>Test</body>
       </html>

`;
console.log(htmlDoc)

let age =18;
let isValid =true;
let empty;
//*********************************************************************************
let message = "Hello";
console.log(message);
//reinitalize the message
message="Welcome";
console.log(message);

//const ; cant be reinitalized
const PI = 3.14;
console.log(PI);
//PI =89.89;
********************************************************************************************

Type system:

 Typescript offers rich type system to write better javascript 
 Typescript compilers give warning when you change type.

Typescript types:

1.string
2.number
3.boolean
4.object
5.function
6.void
7.undefined
8.null
9.any
10.enum


//functions and types: Advanced functions

//args and returns

function sayHello(name:string):string {
   //console.log(`Name ${name}`);
   return `Hello ${name}`;
}
sayHello('Subramanian');
//sayHello();
//sayHello(10)
//default args : from es6
// optional args ; from typescript ? 
function greeter(name:string,message:string='Hai',location?:string):string{
    return `${message} ${name}  ${location}`;
}
let result;
result=greeter('Bhava',"Hello")
console.log(result);
//
result=greeter('Bhava');
console.log(result);

function doStuff(myvar:string|number){
     console.log(myvar);
}
doStuff("10");
doStuff(10);
//doStuff(true);

function calculate(a:number|string,b:number|string){
    let result :any;
    if(typeof a ==='string' && typeof b ==='string'){
        result = a + b;
    }
    //dosomething
    result = a + b;
    return result;
}
    
console.log(calculate(10,"10"));


//function declaration.

//es5 old syntax
let greeter = function(){
   console.log('Greeter');
};
greeter();
//Arrow functions 
let greetMe = () => {
    //function body
    console.log('greetMe -arrow ');
 };
 greetMe();
//Flavours of arrow function
//1.if function body has only one line of code, drop {}
let sayHello = () =>console.log('sayHello '); 
sayHello();
//functions with two args,with default /optional parameters,single line of body
let sayHai = (message:string='Hai',name?:string)=>console.log(`${message} ${name}`);
sayHai('Hello','Subramanian');

//functions with return value:
let sum;
sum =():number=>{
    return 10  +10;
};
console.log(sum())

//if function body has only return statement. drop return statement and {}
sum =():number=>30+10;
console.log(sum())

//single variable parameter no type,no default, return the same: drop ()
let getStock = stock =>stock;
console.log(getStock(10))

//*********************************************************************************
//Functions as parameter

function delay(callback){
    setTimeout(callback,1000,"Hello");
}
delay(function(data){
    console.log(data);
});
//pass arrow function
delay(data=>console.log(data));

//function declaration with arrow
const sleep = callback=>setTimeout(callback,1000,"Hello");
sleep(data=>console.log(data));

const getUser = (resolve,reject)=>{
    let user='subramanian';
    if(user){
        setTimeout(resolve,1000,user);
    }
    else{
        setTimeout(reject,1000,"Something went wrong!!!");
    }
}
getUser(res=>console.log(res),err=>console.log(err));

*********************************************************************************************

Object oriented concepts:

1.class
2.object and its type
3.encapulation
4.Object hierachies - dependency injection,inheritance
5.modularity - es 6.

/**
 * Object creation:
 *  ->constructor pattern
 *     -new 
 *       -function - es 5
 *       -class
 *  ->literal pattern
 */

 //es 5 Object : state + methods
 function Employee(){
     //state
     this.id =1;
     this.firstname='subramanian';
     //methods
     this.calculateSalary = function(){
         return 1000;
     }
 }
 //create /instante object
 let emp = new Employee();
 console.log(emp.id,emp.firstname,emp.calculateSalary());

 //es 6 class/type script class
 /**
 class User{
     //state
     firstName:string='Subramanian';
     lastName:string ='Murugan';
     id:number = 1;
     //methods
     login():boolean{
        return true;
     }
 }
 let user = new User();
console.log(`${user.id}  ${user.firstName} ${user.lastName}`)
**/
//how to initalize the state variables
///hardcoded,after object creation , through constructors
/**
class User{
    //state
    firstName:string='Subramanian';
    lastName:string ='Murugan';
    id:number = 1;
    //methods
    login():boolean{
       return true;
    }
}
let user = new User();
//state reinitalize
user.id =90;
user.firstName="John";
user.lastName="James"
console.log(`${user.id}  ${user.firstName} ${user.lastName}`)
**/
class User{
    //state
    firstName:string;
    lastName:string;
    id:number;
    constructor(id:number,firstName:string,lastName?:string){
       //initalize through constructor
       this.id = id;
       this.firstName= firstName;
       this.lastName = lastName;
    }
    //methods
    login():boolean{
       return true;
    }
}
// //state reinitalize
let user = new User(12,'Subramanian','Murugan');
console.log(`${user.id}  ${user.firstName} ${user.lastName}`)



/**
 * Object creation:
 *  ->constructor pattern
 *     -new 
 *       -function - es 5
 *       -class
 *  ->literal pattern
 */
//literal pattern : to represent models biz objects like product,payment,customer

//Object types ;
/**
 * 1.class as type 
 * 2.interface as type
 * 3.type key word
 */

 //class type
//  class Employee{
//      id:number;
//      name:string;
//      isActive?:boolean;
//  }
// interface Employee{
//      id:number;
//      name:string;
//      isActive?:boolean; 
// }

type Employee = {
     id:number;
     name:string;
     isActive?:boolean;
}

const emp:Employee = {
    id:1,
    name:'Subramanian',
    isActive: true
}
console.log(emp)

const emp1:Employee = {
    id:1,
    name:'Subramanian',
}
**********************************************************************************************

Generics:
 Type Erasor

 List<String> list = new ArrayList();
 list.add("Hello");
  
Generics and typescript:

1.Arrays uses generics

 array "of"




 class Employee{
     id:number;
     name:string;
     isActive?:boolean;
 }
function getEmployee():Promise<Employee>{
   let employee:Employee= {
        id:1,
        name:'Subramanian',
        isActive: true
    }
    return Promise.resolve(employee);
}

//return Promise of array of employees
//findAll():Promise<Employee[]> | findAll():Promise<Array<Employee>>
function findAll():Promise<Array<Employee>> {
    const empList:Array<Employee> = [{
        id:1,
        name:'Subramanian',
        isActive: true
    },
    {
        id:1,
        name:'Subramanian',
        isActive: true
    }
    ];
    return Promise.resolve(empList);
}


async function process(){
   const emp = await getEmployee();
   const list = await findAll();
   console.log(emp);
   console.log(list);
}
process();

 
/**
 * Encapsulation :
 *   private,public protected ; state + methods
 *  private : within class
 * public : any where
 *  protected : private within class and public in inheritance
 * Note: default modifier is public with keyword
 */

 //public , private 
 /** 
 class User{
    //state
    public firstName:string='Subramanian';
    public lastName:string ='Murugan';
    id:number = 1;
    private token:string ='ABBB#$#A4A';
    //methods
    public login():boolean{
       if(this.token){
           return true;
       }
       return false;
    }
}
let user = new User();
console.log(`${user.id}  ${user.firstName} ${user.lastName} ${user.login()}`)
**/

//state declartion elemination in using access modifiers
//constructor args are in general is local variables , ts offers a facility that
//local variables can be converted into instance variables , by adding access modifiers
//since these variables are instance variables , we can remove initalization
class User{
      
    constructor(public id:number = 1,public firstName:string='Subramanian', public lastName:string ='Murugan';
    private token:string ='ABBB#$#A4A'){ }
    //methods
    public login():boolean{
       if(this.token){
           return true;
       }
       return false;
    }
}
let user = new User(23,'foo','bar','token');
console.log(`${user.id}  ${user.firstName} ${user.lastName} ${user.login()}`)
//////////////////////////////////////////////////////////////////////////////////////////////

Hierachy : has-a dependency injection.
//inheritance
/**
 * 1.class based
 *    -concrete class
 *    -abstract classes
 * 2.interface base
 */

 interface InterestCalculator{
     calcualteInterest(amount:number,noofyears:number):number;
 }

 abstract class Account{
    constructor(){
        console.log('account is intialized')
    }
    abstract deposit(amount:number):string;
    //
    protected withdraw():number{
        return 10;
    }
 }
 class SavingsAccount extends Account implements InterestCalculator{
    constructor(){
        super();
        console.log('savings account is intialized')
    }
    //override
    public withdraw():number{
        return 1000 * super.withdraw();
    }
    public deposit(amount:number):string{
         return `${amount} has been deposited`
    }
    calcualteInterest(amount:number,noofyears:number):number{
           return amount * 9.5/100 * noofyears;
    }
 }
 let sb = new SavingsAccount();
 console.log(sb.withdraw(), sb.calcualteInterest(1000,2),sb.deposit(12000));
**********************************************************************************************
java script modularities:

1.commonjs -
2.es 6 modularity  =  commonjs + AMD
  =>TO share code across the application.

commonjs              es6 
 require()            import
 exports              export
 module.exports       export default


Note: any modularity code never works directly inside browser.

commonjs code inside browser:

es 6 modules are not supported inside browser but node supports by default.

ts compiler compiles code into commonjs format by default.




class LoginPage {
    constructor(){
        console.log('login page')
    }
    getTextElement():Promise<any>{
        return Promise.resolve('TextBox');
    }
}

export default LoginPage;



//export statment uses {} to import 
import {firstName,lastName,city,sayHello} from './mylib';
//export default , which does not use {}
import LoginPage from './page/login.page';


console.log(firstName,lastName,city,sayHello());

async function start(){
  let lgPage = new LoginPage();
  let result = await lgPage.getTextElement();
  console.log(result);
}
start();
********************************************************************************************

Protractor:
...........

What is protractor? 

 Protractor is an end-to end testing framework written for angular js and angular application.

How to test application end to end?

 1.manuall testing.
   testing apps based on req, whether is working as expected.

Automation :

 on Behalf of user or user like , programs start testing applications.

Browser based on Automation for testing:

Selienum is Program written in throughtworks late 2004 for automating web application in written java.

Protractor is written based on selenium working model.
     -WebDriver

What is WebDriver?
  WebDriver is software bridge for browsers.

WebDriver is  an official  spec of w3c.

WebDriver is a remote control interface that enables introspection and control of user agents. It provides a platform- and language-neutral wire protocol as a way for out-of-process programs to remotely instruct the behavior of web browsers.

Provided is a set of interfaces to discover and manipulate DOM elements in web documents and to control the behavior of a user agent. It is primarily intended to allow web authors to write tests that automate a user agent from a separate controlling process, but may also be used in such a way as to allow in-browser scripts to control a — possibly separate — browser.

 ->Spec for testers to test webdocuments with help of common interfaces to discover dom elements and mainupulate dom elements.


What is webdriver js?

  It is reference implementation of "WebDriver" written in java script language. 

*********************************************************************************************

Why web driver js? why not selenium server for testing web application with respect to javascript apps?

Web Driver js is lib primarily written for javascript applications on browsers.Web Driver js works with real dom directly.
 

npm install selenium-webdriver

var webdriver = require('selenium-webdriver'),
    By = webdriver.By,
    until = webdriver.until;

var driver = new webdriver.Builder()
    .forBrowser('chrome')
    .build();

driver.get('http://www.webdriverjs.com/');
driver.findElement(By.css('.search-field.form-control')).sendKeys("WebdriverJs");
driver.findElement(By.css('button.search-submit i')).click();
driver.wait(until.elementTextIs(driver.findElement(By.css('.vl-main-header>h1')), "Search Results for: WebdriverJs"), 10000);


Can i test angular js /angular apps using  "webdriverjs"?

  Yes! but not completely.

Why?

 Angular framwork written based on a spec called "Custom Elements/Web Element" 

HTML is language provides lot of tags/elements -  are built in - h1,div,img,input,span...

these elements are understood by browsers.
  <div id="test">

 <hello>----try to evaluate---if element---present --- executed by browser
    |
     if not present
         |
2008 w3c published an spec : custom element spec , we can create custom elements and also custom attribues

  <div mymessage="test">

Angular was written based on this spec.

Protractor was created along with webdriverjs with "custom element" manipulation.
***********************************************************************************************

Protractor Architecture:

It is node programm.


Basic
			 Test
			   |
			Protractor
			   |
			WebDriverjs<----->Driver<----->Browser(DOM)
			  |
			 Node



	                Test
			   |
			Protractor
			   |
			WebDriverjs<--------->Selenimum----Driver------Browser
			  |.
			 Node


Three major components

1.Tests
   Here we have written test scripts(programs) which are sent to seleninum server

2.Selenium Server
   Interaction with browsers

3.Browser Drivers
   It interacts with application on the real browser
    


Protractor-------http------Selenium------JSON wire Protrocal-----Browser Drivers<--->Browser


Programm level flow:
 With Protractor, the test script is run using Node.js. Protractor runs an extra command before performing any action on the browser to ensure that the application being tested has stabilized. For example, let's look at the following snippet of test code.



Protractor test code:

 element(by.css('button.myclass')).click();


Code sent by Protractor:
.........................

This will result in three commands being sent to the Browser Driver

/session/:sessionId/execute_async - First, Protractor tells the browser to run a snippet of JavaScript. This is a custom command which asks Angular to respond when the application is done with all timeouts and asynchronous requests, and ready for the test to resume.

/session/:sessionId/element - Then, the command to find the element is sent.

/session/:sessionId/element/:id/click - Finally the command to perform a click action is sent.


These operations are not sync , rather than async.

Webdriverjs apis are promises powered.
*********************************************************************************************

WebDriverjs/Protractor and Control Flow:
...........................................


As we disucssed every element call, is async , it returns promise.

Sequence of calls like below

element(by.css('button1.myclass')).click();

element(by.css('button2.myclass')).click();

element(by.css('button3.myclass')).click();

 Webdriverjs internally maintains a queue of pending promises called as "Control Flow"

How control flow is managed by webdriver js?

**********************************************************************************************

WebDriver apis:
  WebDriver apis are async by nature, it returns promises.

eg:
npm install selenium-webdriver


const {Builder, By, Key, until} = require('selenium-webdriver');

(async function example() {
  let driver = await new Builder().forBrowser('firefox').build();
  try {
    await driver.get('http://www.google.com/ncr');
    await driver.findElement(By.name('q'));.sendKeys('webdriver', Key.RETURN);
    await driver.wait(until.titleIs('webdriver - Google Search'), 1000);
  } finally {
    await driver.quit();
  }
})();
*************************************************************************

Protractor vs WebDriver apis:

var webdriver = require('selenium-webdriver');
var browser = new webdriver.Builder().usingServer().withCapabilities(c).build();


In Protractor, you are provided with "global protractor and browser objects", which more or less match the webdriver and browser objects, respectively. So if you are already familiar with writing WebDriver code, the most basic way to start writing Protractor code is just to replace webdriver with protractor.

However, Protractor also provides some syntactic sugar to help you write your tests.
 
var webdriver = require('selenium-webdriver');
var browser = new webdriver.Builder().usingServer().withCapabilities(c).build();

webdriver.by


by()
brower.findElement() --- element()

Protractor interall calls webdriverjs api only.

 function by(input){
    webdriver.by(input)
 }
**********************************************************************************************

Protractor and Testing frameworks:

Select Which framework you want to work with:

Protractor supports:

1.jasmin 2.x
2.mocha , with chai
3.Cucumber
4.Serenity/JS
5.Using a Custom Framework

Protractor offers

 -DOM access
 -communication with browsers and servers
 -run test cases
 .....

What about coding?
  can be written using testing frameworks.

testing framework offers

 1.code organization
 2.assertions

code organization : 
   test suite
   test case  
   reports

Protractor largly optizmized , support for "Jasmine2" , default testing framework.

 describe
   it
     expect

Angular + Jasmine + Protractor = Right combination.

DSL : Domain specific languages
  code must be in plain english rather than formal programming syntax.

 eg:
   deposit 100 rs in account no 239098 - code written in groovy - dsl - bdd

*********************************************************************************************

Protractor Setup:
 Style Guide : best pratices when you create testing application.

****************************************************

Two types of projects

1.non angular setup

2.angular setup


1.node js

2.install protractor
  npm install protractor -g 

3.update webdriver-manager

1.two dependencies
 -protractor
 -webdriver-manager

**************************************************************************************

protractor.conf.js

//configuration for protractor is injected into protractor runtime as object. Which must be exported 
//
exports.config = {
    //protractor configuration.
    framework: 'jasmine', // which testing framework you want to integrate
    seleniumAddress: 'http://localhost:4444/wd/hub',
    capabilities: {
       'browserName': 'chrome'
    },
    specs: ['tests/hello.spec.js'],
   
}
tests/hello.spec.js
//jasmine test suit

describe('some suite',function(){

    //test case
    it('some test',function(){
     let a = true;
        //assertions
        expect(a).toBe(true);
    })

});

Runnning :

 webdriver-manager start  // start server

Running:
 protractor
**********************************************************************************************

Test Suit

Test Case

Assertions


Jasmine Use case:

//jasmine test suit

describe('some suite',function(){

    //resource intialization once all test cases
    beforeAll(function(){
        console.log('before all is called')
    });
    //resource initalization for each test cases
    beforeEach(function(){
        console.log('before each is called')
    })

    //test case
    it('some test : 1 ',function(){
     let a = true;
        //assertions
        expect(a).toBe(true);
    })
    //test case
    it('some test : 2',function(){
        let a = true;
           //assertions
           expect(a).toBe(true);
    })

    ///async calls and testing

    afterEach(function(){
        console.log('after each')
    })
    afterAll(function(){
       console.log('after all')
    });


});

//jasmine test suit

describe('some suite',()=>{

    //resource intialization once all test cases
    beforeAll(()=>{
        console.log('before all is called')
    });
    //resource initalization for each test cases
    beforeEach(()=>{
        console.log('before each is called')
    })

    //test case
    it('some test : 1 ',()=>{
     let a = true;
        //assertions
        expect(a).toBe(true);
    })
    //test case
    it('some test : 2',()=>{
        let a = true;
           //assertions
           expect(a).toBe(true);
    })

    ///async calls and testing

    afterEach(()=>{
        console.log('after each')
    })
    afterAll(()=>{
       console.log('after all')
    });


});

*******************************************************************************************
Mocha configuration:

npm install -g mocha
npm install chai --save-dev
npm install chai-as-promised --save-dev


//configuration for protractor is injected into protractor runtime as object. Which must be exported 
//

exports.config = {
    //protractor configuration.
    framework: 'mocha', // which testing framework you want to integrate
    seleniumAddress: 'http://localhost:4444/wd/hub',
    capabilities: {
       'browserName': 'chrome'
    },
    specs: ['tests/hello.mocha.spec.js'],
   
}

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
chai.use(chaiAsPromised);

var expect = chai.expect;


describe('Mocha with protractor', function() {
  it('should still do normal tests', function() {
    expect(true).to.equal(true);
  });
});



Cucumber integration:
.....................

npm install -g cucumber
npm install --save-dev protractor-cucumber-framework


Set the 'framework' property to custom by adding framework: 'custom' and frameworkPath: 'protractor-cucumber-framework' to the config file(cucumberConf.js)

exports.config = {
   seleniumAddress: 'http://localhost:4444/wd/hub',

   baseUrl: 'https://angularjs.org/',

   capabilities: {
      browserName:'Firefox'
   },

   framework: 'custom',

   frameworkPath: require.resolve('protractor-cucumber-framework'),

   specs: [
      './cucumber/*.feature'
   ],

   // cucumber command line options
   cucumberOpts: {
      require: ['./cucumber/*.js'],
      tags: [],
      strict: true,
      format: ["pretty"],
      'dry-run': false,
      compiler: []
   },
   onPrepare: function () {
      browser.manage().window().maximize();
   }
};
************************************************************************************
Browser Configurations:

 As we said , protractor sends commands to browser/server , where dirvers will take care of
mocking/testing web page like real user.

protractor -----protractor.conf.js----->starts executing test cases | browser
         protractor ------webdriverjs-----server---drivers

Note : driver version and browser version must  match else you will error.

session not created:driver mismatch.

  Look at driver version
          chromedriver_84.0.4147.30  <---> 84.0.4147.89 - chrome browser version must
  
Basic browser configuration:

 capabilities: {
       'browserName': 'chrome'
 }

multi browser configuration:
  multiCapabilities: [{
        'browserName': 'chrome'
     },{
        'browserName': 'firefox'
     }]
 }

 
Headless Architecuture:
.......................

   capabilities: {
       'browserName': 'chrome',
       'chromeOptions': {
           'args': ["--headless", "--disable-gpu", "--window-size=800,600"]           
        },
       
    }
**********************************************************************************************

Protractor for DOM Testing:
..........................

HTML Elements:

Markup :


hello.java--compiler---hello.class---jvm---execute----output


source code
<body>
    <div>
        <h1>Hello Protractractor</h1>
    </div>
</body>

index.html ----loads--browser--> Lexcial parser--parse --string tree

parsed code

 body
    |
    div
       |
        h1 
         |
           Hello Protractractor 
         h1
     |
     div
     |
 body



index.html ----loads--browser--> Lexcial parser--parse --string tree-->will move the parsed
code into main memory

allocate memory;
  --->create linked list --- tree model --written in c language

Linked List
 body - Node
    | 
    div Node
       |
        h1 -Node 
         |
           Hello Protractractor 
         h1
     |
     div
     |
 body
Node Types

1.parent node
2.child node
3.sibilings node


javascript represents each node as "Object" called as DOM

every html element is object in javascript. we call dom node.

since every html element is object , 

 ->properties
 ->methods

if you want to create object  , you need class/function.

HTML Element                 Low level Javascript object Interface  ---
<img>                        HTMLImageElement                       
...                          ....


How to get/create Object of any element?

 Note : in javascript DOM objects are not created by using new keyword , rather they use
factory methods only.

let mydiv:HTMLDivElement  = docment.createElement('div')


Objects                                 (built in instance variables)

 1.Browser - core /container objects  --- browser 
 2.Document                           ----document
 3.other objects                       --- document.getelementbyid() / getElements /getelementsbytagname


HTMLELEMENT getElementByid('id')

HTMLELEMENTCollection getelementsbytagname('p');
HTMLElementCollection document.queryselector('css selector')

css selectors
  Are rules applied to element /s to change styles

css selector syntax can be used to get elements in programming world.

*******************************************************************************************

Protractor and DOM : Protractor apis
.....................................

In protractor these are globals.

browser - variable to communicate and get browser specific properties
   === window in javascript

ElementFinder element(Locator) : single element
                   document.queryselector('css selector')
 Locator is object which represents /contains apis related to query the elements - selector apis

ElementArrayFinder   element.all(Locator) : Collection 

*****************************************************************************************************

Write First Protractor test:
............................

Protractor by default looks angular apps:

//Get DOM under test

describe('Protractor : DOM Testing',()=>{

    let url;
    beforeEach(()=>{
        url='http://juliemr.github.io/protractor-demo/';
    });
    //case 1
    it('some webite',()=>{
      
        //load website under test
         browser.get(url);
         //expect 
         expect(browser.getTitle()).toEqual('Super Calculator')


    })

});
*******************************************************************************************************


ElementFinder  element(Locator)

Locator: webdriver.By.selector
  by.css ---------- return Element
  by.id
  by.model
  by.binding
  by.name
  by.tagName
  by.xpath ->Dont use.
  by.linkText
  by.className


ElementFinder element(by.model('first'))

You can execute methods of ElementFinder after getting.

     let ele = element(by.model('first'))
     ele.method

Common methods:

1.getText() 
  webdriver.promise.Promise.<string> getText()
         A promise that will be resolved with the element's visible text.
  
sending input along with event
2.sendKeys('mock value',eventName)



//Get DOM under test


describe('Protractor : DOM Testing',()=>{

    let url;
    beforeEach(()=>{
        url='http://juliemr.github.io/protractor-demo/';
    });
    //case 1
    it('Site Title ',()=>{
       //load website under test
         browser.get(url);
         //expect 
         expect(browser.getTitle()).toEqual('Super Calculator')
    })
    //case 2
    it('Should add two numbers',()=>{
        //load url under test
        browser.get(url);
        //getlement and set values
        element(by.model('first')).sendKeys(100);
        element(by.model('second')).sendKeys(100);
       //trigger click event
        element(by.id('gobutton')).click();
        //if i want to see for browser some time
        //expectation
        let result =element(by.binding('latest'))
        expect(result.getText()).toEqual('200');
        browser.sleep(5000);


    });

});

if you look at the above, we have dumbed textbox logic inside one text case.
what if the same textbox value i want test for different use cases
like below
    it('first textbox should contain only postive number',()=>{
        element(by.model('first')).sendKeys(-100);
    
    })
    it('first textbox should not  contain special character',()=>{
        element(by.model('first')).sendKeys(100);    
    })

do you think , the code is scalable , no. - code duplication

How to solve this?
  
 There is design pattern , called "Page Object".

Page Object  which is Object, has lot of methods , which returns elements.

We will implement page Object, in angular : we will follow angular best practices


Style Guide:
 e2e
     src
      |-- page-objects
          home-page.js
          profile-page.js
          contacts-page.js
      home-spec.js
      profile-spec.js
      contacts-spec.js
*****************************************************************************************************

Angular :

Steps:

1.install angular cli
  >npm install -g @angular/cli

1.create Angular


Point : as in typescript

interface Person{
 ...
}

class User{
  
}

let user = new User();
let user:User = new User();
let user:Person =new User();
let user = new User() as Person;  as- type alise


import { browser, by, element, ElementArrayFinder } from 'protractor';

export class AppPage {
  //methods
  navigateTo(): Promise<unknown> {
    return browser.get(browser.baseUrl) as Promise<unknown>;
  }

  getTitleText(): Promise<string> {
    return element(by.css('app-root span')).getText() as Promise<string>;
  }
  getSpan():ElementFinder {
    return element(by.css('app-root span')) as ElementFinder;
  }

  //new
  getListItems():ElementArrayFinder{
    // return list item elements not content
     return element.all(by.css('.items li')) as ElementArrayFinder
  }
}

element() ----Returns a DOM object
   DOMOBJECT.getText().then(v=>v)
   await DOMOBJECT.getText() ===>value
 
element.all()---Returns list of DOM object

*******************************************************************************************
Collections Api:
 In javascript we have iterator api

1.forEach: -each
    it will walk through each element inside array:
   you can log/print that element.

2.map :
  It is called as transformation api. which transforms array item into some thing

 1,2,3,4,5 ===> map(item=>item *2)  === 1,4,6...

getRows : ElementArrayFinder()
rows = element.all(by.repeater("cust in Customers | orderBy:sortType:sortReverse | filter:searchCustomer"));
this.rows.each(async (eachrow: any)=> {
  letcells = eachrow.$$("td"); 
  log4jsconfig.Log().debug(await cells.get(0).getText());
});

3.filter api : Predicate api : based on boolean condition.

*****************************************************************************************************

import { AppPage } from './app.po';
import { browser, logging } from 'protractor';

describe('workspace-project App', () => {
  let page: AppPage;

  beforeEach(() => {
    page = new AppPage();
  });

  it('should display welcome message', () => {
    page.navigateTo();
    expect(page.getTitleText()).toEqual('welcome');
  });

  //List 0th item verfication
  it('List item oth item verification',()=>{
    let list = page.getListItems();
    expect(list.get(0).getText()).toBe('First');
  });

  it('List item 1th item verification',()=>{
    let list = page.getListItems();
    expect(list.get(1).getText()).toBe('Second');
  });

  it('List item with filter verification',()=>{
    let list = page.getListItems();
    //wether list contains 'Third' Value or not.
    let filteredResult = list.filter((elem, index)=> {
      return elem.getText().then(function(text) {
        return text === 'Third';
     });
    });
    filteredResult.map(async (item)=>{
       let value =await item.getText();
       console.log("value " + value);
    });
  });

  it('List item should contain 3 items',()=>{
    expect(page.getListItems().count()).toBe(3);
  });

  afterEach(async () => {
    // Assert that there are no errors emitted from the browser
    const logs = await browser.manage().logs().get(logging.Type.BROWSER);
   
    expect(logs).not.toContain(jasmine.objectContaining({
      level: logging.Level.SEVERE,
    } as logging.Entry));
  });
});
*******************************************************************************************
Mock data / Test data for automation:
....................................

In general Mock data / test data , we feed manually in manuall testing.

In automation, we feed data through code. 

ways
1.static /hard coded data.
  textbox1 - 10
  textbox2 - 20
  a + b = 30
what if i want to test my application with various data sets.
we need to externalize the test data  into a file.

File can be 
 csv,json,xml,Excel.......

How to read data from the Excel and feed into protractor.

Note: any file, node offers an node modules.


Steps:
1.npm install xlsx
2.read values from excel sheet.

//Get DOM under test
let XLSX = require('xlsx')

describe('Protractor : DOM Testing',()=>{

    let url;
    beforeEach(()=>{
        url='http://juliemr.github.io/protractor-demo/';
    });
    //case 1
    it('Site Title ',()=>{
       //load website under test
         browser.get(url);
         //expect 
         expect(browser.getTitle()).toEqual('Super Calculator')
    })
    //case 2
    it('Should add two numbers',()=>{
    
        //load url under test
        browser.get(url);
        //read excel file
        let workbook =  XLSX.readFile('./testdata.xlsx')
        let worksheet = workbook.Sheets['Sheet1'];
        let cellX='A2'
        let cellY='B2'

        console.log(worksheet[cellX].v,worksheet[cellY].v)
       
        //getlement and set values
        element(by.model('first')).sendKeys(worksheet[cellX].v);
        element(by.model('second')).sendKeys(worksheet[cellY].v);
       //trigger click event
        element(by.id('gobutton')).click();
        //if i want to see for browser some time
        //expectation
        let result =element(by.binding('latest'))
        expect(result.getText()).toEqual('200');
        browser.sleep(5000);

    });
    it('first textbox should contain only postive number',()=>{
        element(by.model('first')).sendKeys(-100);
    
    })
    it('first textbox should not  contain special character',()=>{
        element(by.model('first')).sendKeys(100);    
    })

});
**********************************************************************************************

Parallel Excution:

 Running multiple things simulataneiously.

Two ways you execute paralle exuction:

1.Multi brower
     In order to run protractor tests on multiple browsers.
 We can multi browsers through multiCapabilities configuration in config file   

2.Multi Specs in Paralle 
   we are dividing total no of test specs across the multi instance of same browser.
   
 We have two capabilities
  1.sharedTestFiles : true
    To enable sharing of tests at the spec level,we must configure this property
  2.maxInstances: no of instances
     no of instances represents the maximum number of browsers windows that protractor
   should in paralle.
 
eg:
   if we set maxinstance 2, a test suit of 100 test would result in propractor creating
   2 chorme instances with each instance running to 50 each. 
 
Programmetic paralle excution:

  browser.forkNewDriverInstance(opt_useSameUrl, opt_copyMockModules)
*********************************************************************************************
Test reports:

1.html reports
2.snapshot for failure.

Protractor Life cycles apis:

beforeLaunch
onPrepare
onComplete
onCleanUp
afterLaunch

Steps:

1.install report depedence
npm i protractor-html-reporter-2

2.config file

//configuration for protractor is injected into protractor runtime as object. Which must be exported 
//

exports.config = {
    //protractor configuration.
    framework: 'jasmine', // which testing framework you want to integrate
    //seleniumAddress: 'http://localhost:4444/wd/hub',
    directConnect: true,
    capabilities: {
        'browserName': 'chrome',
        'shardTestFiles': true,
        'maxInstances': 4

        //    'chromeOptions': {
        //        'args': ["--headless", "--disable-gpu", "--window-size=800,600"]           
        //     },

    },
    // multiCapabilities: [{
    //     'browserName': 'chrome'
    //  },{
    //     'browserName': 'firefox'
    //  }],
    specs: ['tests/*.spec.js'],
    onPrepare: function () {
        var jasmineReporters = require('jasmine-reporters');
        jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
            consolidateAll: true,
            savePath: './',
            filePrefix: 'xmlresults'
        }));

        var fs = require('fs-extra');

        fs.emptyDir('screenshots/', function (err) {
            console.log(err);
        });

        jasmine.getEnv().addReporter({
            specDone: function (result) {
                if (result.status == 'failed') {
                    browser.getCapabilities().then(function (caps) {
                        var browserName = caps.get('browserName');

                        browser.takeScreenshot().then(function (png) {
                            var stream = fs.createWriteStream('screenshots/' + browserName + '-' + result.fullName + '.png');
                            stream.write(new Buffer(png, 'base64'));
                            stream.end();
                        });
                    });
                }
            }
        });
    },
    onComplete: function () {
        var browserName, browserVersion;
        var capsPromise = browser.getCapabilities();

        capsPromise.then(function (caps) {
            browserName = caps.get('browserName');
            browserVersion = caps.get('version');
            platform = caps.get('platform');

            var HTMLReport = require('protractor-html-reporter-2');

            testConfig = {
                reportTitle: 'Protractor Test Execution Report',
                outputPath: './',
                outputFilename: 'ProtractorTestReport',
                screenshotPath: './screenshots',
                testBrowser: browserName,
                browserVersion: browserVersion,
                modifiedSuiteName: false,
                screenshotsOnlyOnFailure: true,
                testPlatform: platform
            };
            new HTMLReport().from('xmlresults.xml', testConfig);
        });
    }

}
*********************************************************************************************

Timeouts:
..........

Timeouts from Protractor
..........................

1.page Load : wait time for page load

2.Angular App : waiting for Angular


Timouts from WebDriver:
..........................
1.Async Script 

Timeout for Jasmine
**********************************************************************************************

How to test alerts,prompts:
...........................


describe('Interact with Alert', () => {
    an
    beforeAll(async () => {
        await browser.get('https://letcode.in/alert')
    })

    fit('Simple Alert', async () => {
        await element(by.buttonText("Simple")).click();
        // console.log(await browser.getTitle());
        await browser.sleep(3000);
        (await browser.switchTo().alert()).accept()
    });

    it('Confirm Alert', async () => {
        await element(by.buttonText('Confirm')).click();
        await browser.sleep(3000);
        console.log(await (await browser.switchTo().alert()).getText());
        (await browser.switchTo().alert()).dismiss();
    });

    it('Prompt Alert', async () => {
        await element(by.buttonText('Prompt')).click()
        await browser.sleep(3000);
        let alert = await browser.switchTo().alert();
        await alert.sendKeys("koushik");
        await alert.accept();
    });

    it('Sweet Alert', async () => {
        await element(by.buttonText('Sweet')).click();
        await browser.sleep(2000)
        await element(by.buttonText('OK')).click();
    });
})

**********************************************************************************************
Tabs:

describe('Interact with Tabs', () => {
    beforeAll(async () => {
        await browser.waitForAngularEnabled(false)
        await browser.get('https://the-internet.herokuapp.com/windows')
    })
    it('Switch to new window', async () => {
        let parentWindow = browser.getWindowHandle();
        console.log(await browser.getTitle());
        await element(by.linkText("Click Here")).click();
        let wins = await browser.getAllWindowHandles();
        console.log(wins);
        console.log(wins.length);
        await browser.switchTo().window(wins[1])
        console.log(await browser.getTitle());
        await browser.sleep(5000)

    })

})

browser.switchTo() --- will help to access other objects
 -prompt
 -alert
 -tabs - window
 -frames
 -Location - navigate method
*******************************************************************************************

Debuging Protractor

lanuch.json

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "ProtractorDebugger",
            "protocol": "inspector",
            "program": "C:\\Users\\sasub\\AppData\\Roaming\\npm\\node_modules\\protractor\\bin\\protractor",
            "args": [
                "${workspaceFolder}\\protractor.conf.js"
            ]
        }
    ]
}
Reference:
https://medium.com/@ganeshsirsi/how-to-debug-protractor-tests-in-visual-studio-code-e945fc971a74

**********************************************************************************************
Sample Case study:

Go to angular.io site, find tour of heroes app, download and starts running dev mode.

and start writting e2e test for that site, code for app is given below.

https://stackblitz.com/angular/ovnlgkrnedp?file=src%2Fapp%2Fhero.service.ts


page Object template:

import { browser, by, element } from 'protractor';

export class AppPage {
  navigateTo() {
    return browser.get('/');
  }

  getParagraphText() {
    return element(by.css('app-root h1')).getText();
  }
}


app.spec.ts

'use strict'; // necessary for es6 output in node

import { browser, element, by, ElementFinder, ElementArrayFinder } from 'protractor';
import { promise } from 'selenium-webdriver';

const expectedH1 = 'Tour of Heroes';
const expectedTitle = `${expectedH1}`;
const targetHero = { id: 15, name: 'Magneta' };
const targetHeroDashboardIndex = 3;
const nameSuffix = 'X';
const newHeroName = targetHero.name + nameSuffix;

class Hero {
  id: number;
  name: string;

  // Factory methods

  // Hero from string formatted as '<id> <name>'.
  static fromString(s: string): Hero {
    return {
      id: +s.substr(0, s.indexOf(' ')),
      name: s.substr(s.indexOf(' ') + 1),
    };
  }

  // Hero from hero list <li> element.
  static async fromLi(li: ElementFinder): Promise<Hero> {
      let stringsFromA = await li.all(by.css('a')).getText();
      let strings = stringsFromA[0].split(' ');
      return { id: +strings[0], name: strings[1] };
  }

  // Hero id and name from the given detail element.
  static async fromDetail(detail: ElementFinder): Promise<Hero> {
    // Get hero id from the first <div>
    let _id = await detail.all(by.css('div')).first().getText();
    // Get name from the h2
    let _name = await detail.element(by.css('h2')).getText();
    return {
        id: +_id.substr(_id.indexOf(' ') + 1),
        name: _name.substr(0, _name.lastIndexOf(' '))
    };
  }
}

describe('Tutorial part 6', () => {

  beforeAll(() => browser.get(''));

  
  function getPageElts() {
    let navElts = element.all(by.css('app-root nav a'));

    return {
      navElts: navElts,

      appDashboardHref: navElts.get(0),
      appDashboard: element(by.css('app-root app-dashboard')),
      topHeroes: element.all(by.css('app-root app-dashboard > div h4')),

      appHeroesHref: navElts.get(1),
      appHeroes: element(by.css('app-root app-heroes')),
      allHeroes: element.all(by.css('app-root app-heroes li')),
      selectedHeroSubview: element(by.css('app-root app-heroes > div:last-child')),

      heroDetail: element(by.css('app-root app-hero-detail > div')),

      searchBox: element(by.css('#search-box')),
      searchResults: element.all(by.css('.search-result li'))
    };
  }

  describe('Initial page', () => {

    it(`has title '${expectedTitle}'`, () => {
      expect(browser.getTitle()).toEqual(expectedTitle);
    });

    it(`has h1 '${expectedH1}'`, () => {
        expectHeading(1, expectedH1);
    });

    const expectedViewNames = ['Dashboard', 'Heroes'];
    it(`has views ${expectedViewNames}`, () => {
      let viewNames = getPageElts().navElts.map((el: ElementFinder) => el.getText());
      expect(viewNames).toEqual(expectedViewNames);
    });

    it('has dashboard as the active view', () => {
      let page = getPageElts();
      expect(page.appDashboard.isPresent()).toBeTruthy();
    });

  });

  describe('Dashboard tests', () => {

    beforeAll(() => browser.get(''));

    it('has top heroes', () => {
      let page = getPageElts();
      expect(page.topHeroes.count()).toEqual(4);
    });

    it(`selects and routes to ${targetHero.name} details`, dashboardSelectTargetHero);

    it(`updates hero name (${newHeroName}) in details view`, updateHeroNameInDetailView);

    it(`cancels and shows ${targetHero.name} in Dashboard`, () => {
      element(by.buttonText('go back')).click();
      browser.waitForAngular(); // seems necessary to gets tests to pass for toh-pt6

      let targetHeroElt = getPageElts().topHeroes.get(targetHeroDashboardIndex);
      expect(targetHeroElt.getText()).toEqual(targetHero.name);
    });

    it(`selects and routes to ${targetHero.name} details`, dashboardSelectTargetHero);

    it(`updates hero name (${newHeroName}) in details view`, updateHeroNameInDetailView);

    it(`saves and shows ${newHeroName} in Dashboard`, () => {
      element(by.buttonText('save')).click();
      browser.waitForAngular(); // seems necessary to gets tests to pass for toh-pt6

      let targetHeroElt = getPageElts().topHeroes.get(targetHeroDashboardIndex);
      expect(targetHeroElt.getText()).toEqual(newHeroName);
    });

  });

  describe('Heroes tests', () => {

    beforeAll(() => browser.get(''));
    browser.sleep(1000);

    it('can switch to Heroes view', () => {
      getPageElts().appHeroesHref.click();
      let page = getPageElts();
      expect(page.appHeroes.isPresent()).toBeTruthy();
      expect(page.allHeroes.count()).toEqual(10, 'number of heroes');
    });

    it('can route to hero details', async () => {
      getHeroLiEltById(targetHero.id).click();

      let page = getPageElts();
      expect(page.heroDetail.isPresent()).toBeTruthy('shows hero detail');
      let hero = await Hero.fromDetail(page.heroDetail);
      expect(hero.id).toEqual(targetHero.id);
      expect(hero.name).toEqual(targetHero.name.toUpperCase());
    });

    it(`updates hero name (${newHeroName}) in details view`, updateHeroNameInDetailView);

    it(`shows ${newHeroName} in Heroes list`, () => {
      element(by.buttonText('save')).click();
      browser.waitForAngular();
      let expectedText = `${targetHero.id} ${newHeroName}`;
      expect(getHeroAEltById(targetHero.id).getText()).toEqual(expectedText);
    });

    it(`deletes ${newHeroName} from Heroes list`, async () => {
      const heroesBefore = await toHeroArray(getPageElts().allHeroes);
      const li = getHeroLiEltById(targetHero.id);
      li.element(by.buttonText('x')).click();

      const page = getPageElts();
      expect(page.appHeroes.isPresent()).toBeTruthy();
      expect(page.allHeroes.count()).toEqual(9, 'number of heroes');
      const heroesAfter = await toHeroArray(page.allHeroes);
      // console.log(await Hero.fromLi(page.allHeroes[0]));
      const expectedHeroes =  heroesBefore.filter(h => h.name !== newHeroName);
      expect(heroesAfter).toEqual(expectedHeroes);
      // expect(page.selectedHeroSubview.isPresent()).toBeFalsy();
    });

    it(`adds back ${targetHero.name}`, async () => {
      const newHeroName = 'Alice';
      const heroesBefore = await toHeroArray(getPageElts().allHeroes);
      const numHeroes = heroesBefore.length;

      element(by.css('input')).sendKeys(newHeroName);
      element(by.buttonText('add')).click();

      let page = getPageElts();
      let heroesAfter = await toHeroArray(page.allHeroes);
      expect(heroesAfter.length).toEqual(numHeroes + 1, 'number of heroes');

      expect(heroesAfter.slice(0, numHeroes)).toEqual(heroesBefore, 'Old heroes are still there');

      const maxId = heroesBefore[heroesBefore.length - 1].id;
      expect(heroesAfter[numHeroes]).toEqual({id: maxId + 1, name: newHeroName});
    });

    it('displays correctly styled buttons', async () => {
      element.all(by.buttonText('x')).then(buttons => {
        for (const button of buttons) {
          // Inherited styles from styles.css
          expect(button.getCssValue('font-family')).toBe('Arial');
          expect(button.getCssValue('border')).toContain('none');
          expect(button.getCssValue('padding')).toBe('5px 10px');
          expect(button.getCssValue('border-radius')).toBe('4px');
          // Styles defined in heroes.component.css
          expect(button.getCssValue('left')).toBe('194px');
          expect(button.getCssValue('top')).toBe('-32px');
        }
      });

      const addButton = element(by.buttonText('add'));
      // Inherited styles from styles.css
      expect(addButton.getCssValue('font-family')).toBe('Arial');
      expect(addButton.getCssValue('border')).toContain('none');
      expect(addButton.getCssValue('padding')).toBe('5px 10px');
      expect(addButton.getCssValue('border-radius')).toBe('4px');
    });

  });

  describe('Progressive hero search', () => {

    beforeAll(() => browser.get(''));

    it(`searches for 'Ma'`, async () => {
      getPageElts().searchBox.sendKeys('Ma');
      browser.sleep(1000);

      expect(getPageElts().searchResults.count()).toBe(4);
    });

    it(`continues search with 'g'`, async () => {
      getPageElts().searchBox.sendKeys('g');
      browser.sleep(1000);
      expect(getPageElts().searchResults.count()).toBe(2);
    });

    it(`continues search with 'e' and gets ${targetHero.name}`, async () => {
      getPageElts().searchBox.sendKeys('n');
      browser.sleep(1000);
      let page = getPageElts();
      expect(page.searchResults.count()).toBe(1);
      let hero = page.searchResults.get(0);
      expect(hero.getText()).toEqual(targetHero.name);
    });

    it(`navigates to ${targetHero.name} details view`, async () => {
      let hero = getPageElts().searchResults.get(0);
      expect(hero.getText()).toEqual(targetHero.name);
      hero.click();

      let page = getPageElts();
      expect(page.heroDetail.isPresent()).toBeTruthy('shows hero detail');
      let hero2 = await Hero.fromDetail(page.heroDetail);
      expect(hero2.id).toEqual(targetHero.id);
      expect(hero2.name).toEqual(targetHero.name.toUpperCase());
    });
  });

  async function dashboardSelectTargetHero() {
    let targetHeroElt = getPageElts().topHeroes.get(targetHeroDashboardIndex);
    expect(targetHeroElt.getText()).toEqual(targetHero.name);
    targetHeroElt.click();
    browser.waitForAngular(); // seems necessary to gets tests to pass for toh-pt6

    let page = getPageElts();
    expect(page.heroDetail.isPresent()).toBeTruthy('shows hero detail');
    let hero = await Hero.fromDetail(page.heroDetail);
    expect(hero.id).toEqual(targetHero.id);
    expect(hero.name).toEqual(targetHero.name.toUpperCase());
  }

  async function updateHeroNameInDetailView() {
    // Assumes that the current view is the hero details view.
    addToHeroName(nameSuffix);

    let page = getPageElts();
    let hero = await Hero.fromDetail(page.heroDetail);
    expect(hero.id).toEqual(targetHero.id);
    expect(hero.name).toEqual(newHeroName.toUpperCase());
  }

});

function addToHeroName(text: string): promise.Promise<void> {
  let input = element(by.css('input'));
  return input.sendKeys(text);
}

function expectHeading(hLevel: number, expectedText: string): void {
    let hTag = `h${hLevel}`;
    let hText = element(by.css(hTag)).getText();
    expect(hText).toEqual(expectedText, hTag);
};

function getHeroAEltById(id: number): ElementFinder {
  let spanForId = element(by.cssContainingText('li span.badge', id.toString()));
  return spanForId.element(by.xpath('..'));
}

function getHeroLiEltById(id: number): ElementFinder {
  let spanForId = element(by.cssContainingText('li span.badge', id.toString()));
  return spanForId.element(by.xpath('../..'));
}

async function toHeroArray(allHeroes: ElementArrayFinder): Promise<Hero[]> {
  let promisedHeroes = await allHeroes.map(Hero.fromLi);
  // The cast is necessary to get around issuing with the signature of Promise.all()
  return <Promise<any>> Promise.all(promisedHeroes);
}
*******************************************************************************************

Dev ops Integration:
....................

Source code management(svn,git)------------->jenkins----job----test
*******************************************************************************************
























